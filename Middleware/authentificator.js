const jwt = require('jsonwebtoken');
const pool = require('../database');

async function authenticator(req, res, next) {
                try {
                                const authHeader = req.headers.authorization;

                                // V√©rifier si le header Authorization est bien pr√©sent
                                if (!authHeader || !authHeader.startsWith('Bearer ')) {
                                                console.error('‚ùå Token manquant ou mal format√©.');
                                                return res.status(401).json({ error: 'Token manquant ou invalide' });
                                }

                                const token = authHeader.split(' ')[1]; // R√©cup√©ration du token apr√®s "Bearer "
                                console.log('‚úÖ Token re√ßu:', token);

                                // V√©rifier et d√©coder le token
                                const decoded = jwt.verify(token, process.env.JWT_SECRET);
                                console.log('‚úÖ Token d√©cod√©:', decoded);

                                if (!decoded || !decoded.id_user) {
                                                console.error('‚ùå Token invalide.');
                                                return res.status(401).json({ error: 'Token invalide' });
                                }

                                // Connexion √† la base de donn√©es
                                const conn = await pool.getConnection();
                                try {
                                                console.log(`üîç V√©rification de l'utilisateur ID: ${decoded.id_user}`);

                                                // V√©rifier si l'utilisateur existe
                                                const [rows] = await conn.query('SELECT * FROM user WHERE id_user = ?', [decoded.id_user]);
                                                conn.release(); // Lib√©rer la connexion apr√®s la requ√™te

                                                console.log('‚úÖ R√©sultat de la requ√™te:', rows);

                                                if (!rows || rows.length === 0) {
                                                                console.error('‚ùå Utilisateur non trouv√©.');
                                                                return res.status(404).json({ error: 'Utilisateur non trouv√©' });
                                                }

                                                // Stocker l'utilisateur dans `req.user` pour l'utiliser dans les routes suivantes
                                                req.user = rows[0];
                                                console.log('‚úÖ Utilisateur authentifi√©:', req.user);

                                                next(); // Passer √† la prochaine fonction middleware ou route
                                } catch (err) {
                                                console.error('‚ùå Erreur lors de la requ√™te SQL:', err);
                                                return res.status(500).json({ error: 'Erreur interne du serveur' });
                                }
                } catch (err) {
                                console.error('‚ùå Erreur lors de la v√©rification du token:', err);

                                if (err.name === 'TokenExpiredError') {
                                                console.warn('üîÑ Token expir√©, tentative de rafra√Æchissement...');
                                                return res.status(401).json({ error: 'Token expir√©', refresh: true });
                                }


                                return res.status(401).json({ error: 'Token invalide' });
                }
}

module.exports = { authenticator };
